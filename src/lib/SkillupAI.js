// lib/SkillupAI.js

const GOOGLE_API_KEY = process.env.NEXT_PUBLIC_GOOGLE_API_KEY;
const GOOGLE_MODEL = process.env.NEXT_PUBLIC_GOOGLE_MODEL || 'gemini-2.0-flash-exp';
const GOOGLE_API_VERSION = process.env.NEXT_PUBLIC_GOOGLE_API_VERSION || 'v1beta';

// Check if we're in development mode and provide a fallback
const isDevelopment = process.env.NODE_ENV === 'development';

// Debug logging
console.log('Environment check:', {
  GOOGLE_API_KEY: GOOGLE_API_KEY ? 'Present' : 'Missing',
  GOOGLE_MODEL,
  GOOGLE_API_VERSION,
  isDevelopment
});

if (!GOOGLE_API_KEY && !isDevelopment) {
  throw new Error('GOOGLE_API_KEY is missing in .env.local');
}

const GOOGLE_API_BASE = `https://generativelanguage.googleapis.com/${GOOGLE_API_VERSION}/models/${GOOGLE_MODEL}:generateContent`;

export async function generateContent({ prompt }) {
  console.log('generateContent called with prompt length:', prompt.length);
  console.log('API Key present:', !!GOOGLE_API_KEY);
  console.log('API Base URL:', GOOGLE_API_BASE);
  
  // In development mode without API key, return a mock response
  if (!GOOGLE_API_KEY && isDevelopment) {
    console.warn('GOOGLE_API_KEY not found, using mock response in development mode');
    return new Promise((resolve) => {
      setTimeout(() => {
        resolve(`This is a mock AI explanation for the question. In a real scenario, this would be generated by Google's Gemini AI. The question was: "${prompt.substring(0, 100)}..."`);
      }, 1000);
    });
  }

  try {
    console.log('Making API request to Google AI...');
    const response = await fetch(`${GOOGLE_API_BASE}?key=${GOOGLE_API_KEY}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [
          {
            parts: [{ text: prompt }],
          },
        ],
        generationConfig: {
          temperature: 0.7,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 1024,
        },
      }),
    });

    console.log('API Response status:', response.status);
    
    if (!response.ok) {
      const error = await response.json().catch(() => ({}));
      console.error('Google AI API error:', error);
      console.error('Response status:', response.status);
      console.error('Response statusText:', response.statusText);
      throw new Error(`Google AI API error: ${error.error?.message || response.statusText}`);
    }

    const data = await response.json();
    console.log('API Response data:', data);
    
    const generatedText = data?.candidates?.[0]?.content?.parts?.[0]?.text || '';

    if (!generatedText) {
      console.error('No text generated in response:', data);
      throw new Error('No response generated from AI');
    }

    console.log('Generated text length:', generatedText.length);
    return generatedText;
  } catch (error) {
    console.error('Error generating AI content:', error);
    
    // Return a fallback explanation if AI fails
    return `I apologize, but I'm having trouble generating an explanation right now. Here's a basic explanation: The correct answer is the most appropriate choice based on the question context. Please review the question and options carefully to understand why this answer is correct.`;
  }
}
